;; Analyzed by ClojureScript 0.0-3126
{:use-macros nil, :excludes #{}, :name hello-world.core, :imports nil, :requires {reagent.core reagent.core, reagent reagent.core}, :uses nil, :defs {start {:protocol-inline nil, :meta {:arglists (quote ([])), :export true, :end-column 21, :end-line 19, :column 16, :line 19, :file "/home/juho/Source/problems/src/hello_world/core.cljs"}, :name hello-world.core/start, :variadic false, :file "src/hello_world/core.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 19, :end-line 19, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, error {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 12, :end-line 16, :column 7, :line 16, :file "/home/juho/Source/problems/src/hello_world/core.cljs"}, :name hello-world.core/error, :variadic false, :file "src/hello_world/core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 0}), :line 16, :end-line 16, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, catch-and-rethrow {:protocol-inline nil, :meta {:arglists (quote ([])), :export true, :end-column 33, :end-line 9, :column 16, :line 9, :file "/home/juho/Source/problems/src/hello_world/core.cljs"}, :name hello-world.core/catch-and-rethrow, :variadic false, :file "src/hello_world/core.cljs", :end-column 33, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 0}), :line 9, :end-line 9, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, throw-something {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 22, :end-line 6, :column 7, :line 6, :file "/home/juho/Source/problems/src/hello_world/core.cljs"}, :name hello-world.core/throw-something, :variadic false, :file "src/hello_world/core.cljs", :end-column 22, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag ignore, :variadic false, :max-fixed-arity 0}), :line 6, :end-line 6, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}}, :require-macros nil, :cljs.analyzer/constants {:order [:else :p], :seen #{:else :p}}, :doc nil}